

# This file was *autogenerated* from the file answer.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_23 = Integer(23); _sage_const_24 = Integer(24); _sage_const_3 = Integer(3); _sage_const_6 = Integer(6); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5)
from sage.all import *

import sympy
from Crypto.Util.number import *

from sage.rings.factorint import factor_trial_division

# n, e, ct
lines = open("../dist/output.txt", "r").readlines()
for line in lines:
    exec(line.strip())

p_24bit = list(sympy.primerange(_sage_const_2 **_sage_const_23 , _sage_const_2 **_sage_const_24 ))

g = _sage_const_3 

fact = []

## find largest factor
g_pow = pow(g, _sage_const_2 **_sage_const_2 , n)
g_pow_lst = []
for smallp in p_24bit:
    for _ in range(_sage_const_6 ):
        g_pow = pow(g_pow, smallp, n)
    g_pow_lst.append((smallp, g_pow))
    if g_pow == _sage_const_1 :
        fact.append(smallp)
        break

## find second large factor
for idx in range(len(g_pow_lst)-_sage_const_2 , -_sage_const_1 , -_sage_const_1 ):
    smallp, g_pow = g_pow_lst[idx]
    for _ in range(_sage_const_6 ):
        g_pow = pow(g_pow, fact[_sage_const_0 ], n)
    if g_pow != _sage_const_1 :
        fact.append(presmallp)
        break
    presmallp = smallp
    
assert len(fact) == _sage_const_2 

print("compute two factor is done")
print(fact)

partfactphi = n // ((fact[_sage_const_0 ]**(_sage_const_6 *_sage_const_2 )) * (fact[_sage_const_1 ]**(_sage_const_5 *_sage_const_2 ))) # equals phi / ((fact[0]**(6*2)) * (fact[1]**(5*2)))
print(partfactphi)

print(factor_trial_division(partfactphi, _sage_const_2 **_sage_const_24 ))

phi = partfactphi * ((fact[_sage_const_0 ]**(_sage_const_6 *_sage_const_2 )) * (fact[_sage_const_1 ]**(_sage_const_5 *_sage_const_2 )))
d = pow(e, -_sage_const_1 , phi)

print(long_to_bytes(int(pow(ct, int(d), n))))

